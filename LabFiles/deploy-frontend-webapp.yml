name: Deployment globoticket Frontend
env:
  appname: globoticket
  resourcegroup: globoticket
  slotname: staging
on:
  release: 
     types: [published] 
     
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    outputs:
      homepage: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: get release artifacts for deployment, picks data from latest release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ github.event.release.id }}
          regex: true
          file: ".*"
          target: './'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: Create Deployment Slot Staging
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp deployment slot create --name ${{env.appname}} --resource-group ${{env.resourcegroup}} --slot ${{env.slotname}}
          
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: '${{env.appname}}'
          slot-name: '${{env.slotname}}'
          package: ./frontend.zip
           
  validate:
    runs-on: ubuntu-latest
    needs: deploy
    environment:
      name: 'staging'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: print env
        run: echo $homepage
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}        
      - name: Install playwright
        run:  npm init playwright@latest
          
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x   
      
      - name: Install playwright 
        run:  dotnet tool install --global Microsoft.Playwright.CLI
     
      - name: ensure deployment is healthy before we test
        run: |
            response=$(curl -s "${homepage}/health/ready")
            status=$(echo "$response" | jq -r '.status')
  
            while [[ "$status" != "Healthy" ]]; do
              echo "Waiting for health endpoint..."
              sleep 1
              response=$(curl -s "${homepage}/health/ready")
              status=$(echo "$response" | jq -r '.status')
            done
            echo "Health endpoint current status :" $status
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}
      - name: Run tests
        run: dotnet test Tests.Playwright/Tests.Playwright.csproj
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}
  staging10:
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: 'staging30'
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: TenPercent
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az webapp traffic-routing set --distribution ${{env.slotname}}=10  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}
  staging30:
    runs-on: ubuntu-latest
    needs: staging10
    environment:
      name: 'staging30'
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: TenPercent
      uses: Azure/cli@v1.0.7
      with:
        inlineScript: |
          az webapp traffic-routing set --distribution ${{env.slotname}}=30  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}
          
  VipSwap:
    runs-on: ubuntu-latest
    needs: staging30
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: vip swap
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp deployment slot swap --slot ${{env.slotname}}  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}

      - name: clear Routing rules (100% to production)
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp traffic-routing clear --name ${{env.appname}} --resource-group ${{env.resourcegroup}}

      - name: clear staging slot
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
           az webapp deployment slot delete --name ${{env.appname}} --resource-group ${{env.resourcegroup}} --slot ${{env.slotname}}
