name: Deployment globoticket Frontend
env:
  HomePage: ''
  appname: globoticket
  resourcegroup: globoticket
  slotname: staging
on:
  release: 
     types: [published] 
     
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: get release artifacts for deployment, picks data from latest release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ github.event.release.id }}
          regex: true
          file: ".*"
          target: './'

      - name: UnZip artifact for deployment
        run: |
          unzip ./frontend.zip -d ./frontend
        
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: Create Deployment Slot Staging
        uses: Azure/cli@v1.0.7
        with:
          inlineScript: |
            az webapp deployment slot create --name ${{env.appname}} --resource-group ${{env.resourcegroup}} --slot ${{env.slotname}}
          
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: '${{env.appname}}'
          slot-name: '${{env.slotname}}'
          package: ./frontend
      - name: Set homepage location for next job
        run: |
          echo "homepage=${{ steps.deploy-to-webapp.outputs.webapp-url }}" >> $GITHUB_OUTPUT
          
  validate:
    runs-on: ubuntu-latest
    needs: deploy
    environment:
      name: 'staging'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - name: Install playwright
        run:  npm init playwright@latest
          
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x   
      
      - name: Install playwright 
        run:  dotnet tool install --global Microsoft.Playwright.CLI
     
      - name: ensure deployment is healthy before we test
        run: |
            HEALTH_ENDPOINT="https://globoticket-staging.azurewebsites.net/health/ready"
            while true; do
              response=$(curl -s "$HEALTH_ENDPOINT")
              status=$(echo "$response" | jq -r '.status')

              if [[ "$status" == "Healthy" ]]; then
                echo "Health endpoint current status :" $status
                break
              fi
              echo "Waiting for health endpoint..."
              sleep 1
            done
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}
      - name: Run tests
        run: dotnet test Tests.Playwright/Tests.Playwright.csproj
        env: 
          homepage: ${{ needs.deploy.outputs.homepage }}

#   ten_percent_traffic:
#     runs-on: ubuntu-latest
#     needs: validate
#     environment:
#       name: 'staging'

#     steps:
#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
        
#       - name: Move 10% trafic to staging
#         uses: Azure/cli@v1.0.7
#         with:
#           inlinescript: 'az webapp traffic-routing set --distribution ${{env.slotname}}=10  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}'
#       - name: validate the deployment is still healthy for 10 seconds
#         run: |
#             MAX_ATTEMPTS=10
#             HEALTH_ENDPOINT="https://globoticket-staging.azurewebsites.net/health/ready"
#              for ((attempt=1; attempt <= MAX_ATTEMPTS; attempt++)); do
#               response=$(curl -s "$HEALTH_ENDPOINT")
#               status=$(echo "$response" | jq -r '.status')

#               if [[ "$status" == "Unhealthy" ]]; then
#                 echo "Health endpoint is Unhealthy."
#                 exit -1
#               fi

#               echo "Attempt $attempt: Health endpoint is:" $status
#               sleep 1
#             done       
#         env: 
#           homepage: ${{ needs.deploy.outputs.homepage }}
  
#   twenty_percent_traffic:
#     runs-on: ubuntu-latest
#     needs: ['deploy', 'ten_percent_traffic']
#     environment:
#       name: 'staging'

#     steps:
#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#       - name: Move 20% trafic to staging
#         uses: Azure/cli@v1.0.7
#         with:
#           inlinescript: 'az webapp traffic-routing set --distribution ${{env.slotname}}=20  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}'
#       - name: validate the deployment is still healthy for 10 seconds
#         run: |
#             MAX_ATTEMPTS=10
#             HEALTH_ENDPOINT="https://globoticket-staging.azurewebsites.net/health/ready"
#              for ((attempt=1; attempt <= MAX_ATTEMPTS; attempt++)); do
#               response=$(curl -s "$HEALTH_ENDPOINT")
#               status=$(echo "$response" | jq -r '.status')

#               if [[ "$status" == "Unhealthy" ]]; then
#                 echo "Health endpoint is Unhealthy."
#                 exit -1
#               fi

#               echo "Attempt $attempt: Health endpoint is:" $status
#               sleep 1
#             done       
#         env: 
#           homepage: ${{ needs.deploy.outputs.homepage }}
  
#   sixty_percent_traffic:
#     runs-on: ubuntu-latest
#     needs: ['deploy', 'twenty_percent_traffic']
#     environment:
#       name: 'staging'

#     steps:
#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#       - name: Move 20% trafic to staging
#         uses: Azure/cli@v1.0.7
#         with:
#           inlinescript: 'az webapp traffic-routing set --distribution ${{env.slotname}}=60  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}'
#       - name: validate the deployment is still healthy for 10 seconds
#         run: |
#             MAX_ATTEMPTS=10
#             HEALTH_ENDPOINT="https://globoticket-staging.azurewebsites.net/health/ready"
#              for ((attempt=1; attempt <= MAX_ATTEMPTS; attempt++)); do
#               response=$(curl -s "$HEALTH_ENDPOINT")
#               status=$(echo "$response" | jq -r '.status')

#               if [[ "$status" == "Unhealthy" ]]; then
#                 echo "Health endpoint is Unhealthy."
#                 exit -1
#               fi

#               echo "Attempt $attempt: Health endpoint is:" $status
#               sleep 1
#             done       
#         env: 
#           homepage: ${{ needs.deploy.outputs.homepage }}
#   VipSwap:
#     runs-on: ubuntu-latest
#     needs: ['deploy', 'sixty_percent_traffic']
#     environment:
#       name: 'production'

#     steps:
#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#       - name: Move 30% trafic to staging
#         uses: Azure/cli@v1.0.7
#         with:
#           inlinescript: 'az webapp deployment slot swap --slot ${{env.slotname}}  --name ${{env.appname}} --resource-group ${{env.resourcegroup}}'

#       - name: validate the deployment is still healthy for 10 seconds 
#         run: |
#             MAX_ATTEMPTS=10
#             HEALTH_ENDPOINT="https://globoticket-staging.azurewebsites.net/health/ready"
#              for ((attempt=1; attempt <= MAX_ATTEMPTS; attempt++)); do
#               response=$(curl -s "$HEALTH_ENDPOINT")
#               status=$(echo "$response" | jq -r '.status')

#               if [[ "$status" == "Unhealthy" ]]; then
#                 echo "Health endpoint is Unhealthy."
#                 exit -1
#               fi

#               echo "Attempt $attempt: Health endpoint is:" $status
#               sleep 1
#             done       
#         env: 
#           homepage: ${{ needs.deploy.outputs.homepage }}

#       - name: clear Routing rules (100% to production)
#         uses: Azure/cli@v1.0.7
#         with:
#           inlinescript: 'az webapp traffic-routing clear --name ${{env.appname}} --resource-group ${{env.resourcegroup}}'

#       - name: clear staging slot
#         uses: Azure/cli@v1.0.7
#         with:
#           inlinescript: 'az webapp deployment slot delete --name ${{env.appname}} --resource-group ${{env.resourcegroup}} --slot ${{env.slotname}}'
